@page "/qrguard/{authcipher}/{*infobase}"

@using System;
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net;
@using System.IO;
@using System.Security.Cryptography;
@inject IHttpClientFactory ClientFactory


<PageTitle>QRGuard</PageTitle>




@if(requested) {
<div align="center">
    <h2>欢迎使用，@name。</h2>
    @if(avatarPath != null){
        <img src="@avatarPath" alt="avatar" width=50 height=50/>
    }
    <a href = "@qrcodePath">
    <img src="@qrcodePath" alt="QRCode" width=300 height=300/>
    </a>
    <p>@DateTime.Now</p>
    <button class="btn btn-primary" @onclick="qrCodeReq">ReFresh QRCode</button>
    <br />
    <br />
    <a href="https://github.com/HuXioAn"><p>by Huxiaoan with dotnet blazor</p></a>
</div>
}else{
    //请求失败显示
    <h2>请求失败，请重试。</h2>
}




@code {
    [Parameter]
    public string authCipher{set;get;}

    [Parameter]
    public string infoBase{set;get;}

    private string appId = "";

    private string name;

    private string avatarPath;

    private string? qrcodePath = null;

    private bool requested = false;

    protected override void OnInitialized(){

        //Console.WriteLine("Access");
        //验证auth
        string timeStamp,sha2Verify;
        try{
            timeStamp = authCipher[0..13];
            sha2Verify = authCipher[13..];
            if(sha2Verify.Length != 40){
                throw new Exception("Error sha length");
            }
        }catch{
            return;
        }

        var shaStr = $"aid:{appId};tm:{timeStamp}";
        var sha1 = SHA1.Create();

        var shaRes = sha1.ComputeHash(System.Text.Encoding.GetEncoding("UTF-8").GetBytes(shaStr));
        var shaResStr = BitConverter.ToString(shaRes).Replace("-","").ToLower();

        if(sha2Verify == shaResStr){
            //pass

            var infoByte = Convert.FromBase64String(infoBase);
            var info = System.Text.Encoding.UTF8.GetString(infoByte);

            var p = info.IndexOf(";");
            if(p == -1)return;

            name = info[0..p];
            avatarPath = info[(p+1)..];
            qrCodeReq(); 
        }else{
            //fail
            requested = false;
            return;
        }
    }

    private void qrCodeReq() {
        if(string.IsNullOrWhiteSpace(name))return;
        requested = false;
        WriteBytesToFile($"./wwwroot/qrcode/{name}.jpg",GetBytesFromUrl($"http://localhost:11451/api/QRGuard/{name}/code"));
        qrcodePath = $"qrcode/{name}.jpg?time=${DateTime.Now.ToFileTime()}";
        requested = true;
        
    }

    private static byte[] GetBytesFromUrl(string url)
        {
            byte[] b;
            HttpWebRequest myReq = (HttpWebRequest)WebRequest.Create(url);
            WebResponse myResp = myReq.GetResponse();

            Stream stream = myResp.GetResponseStream();
            using (BinaryReader br = new BinaryReader(stream))
            {
                b = br.ReadBytes(50000);
                br.Close();
            }
            myResp.Close();
            return b;

        }

    private static void WriteBytesToFile(string fileName, byte[] content)
        {
            FileStream fs = new FileStream(fileName, FileMode.Create);
            BinaryWriter w = new BinaryWriter(fs);
            try
            {
                w.Write(content);
            }
            finally
            {
                fs.Close();
                w.Close();
            }

        }

   
}
